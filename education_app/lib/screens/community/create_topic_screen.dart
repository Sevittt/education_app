// lib/screens/community/create_topic_screen.dart

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/discussion_topic.dart';
import '../../services/community_service.dart';
import '../../models/auth_notifier.dart';

class CreateTopicScreen extends StatefulWidget {
  const CreateTopicScreen({super.key});

  @override
  State<CreateTopicScreen> createState() => _CreateTopicScreenState();
}

class _CreateTopicScreenState extends State<CreateTopicScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _contentController = TextEditingController();
  bool _isLoading = false;

  @override
  void dispose() {
    _titleController.dispose();
    _contentController.dispose();
    super.dispose();
  }

  // --- CORRECTED FUNCTION ---
  Future<void> _createTopic() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      // Get the currently logged-in user from AuthNotifier
      final authNotifier = Provider.of<AuthNotifier>(context, listen: false);
      // Use the correct property: 'currentUser' instead of 'user'
      final appUser = authNotifier.currentUser;

      if (appUser == null) {
        // Handle case where user is not logged in
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Error: You must be logged in to create a topic.'),
          ),
        );
        setState(() {
          _isLoading = false;
        });
        return;
      }

      final newTopic = DiscussionTopic(
        id: '', // Will be generated by Firestore
        title: _titleController.text,
        content: _contentController.text,
        authorName:
            appUser.displayName ??
            'Anonymous', // This is the currently active line
        authorId: appUser.uid,
        createdAt: DateTime.now(),
        commentCount: 0,
      );

      try {
        final communityService = Provider.of<CommunityService>(
          context,
          listen: false,
        );
        await communityService.createTopic(newTopic);

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Topic created successfully!')),
          );
          Navigator.pop(context);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: Text('Failed to create topic: $e')));
        }
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Start New Discussion')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(
                  labelText: 'Topic Title',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Title cannot be empty.';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16.0),
              TextFormField(
                controller: _contentController,
                decoration: const InputDecoration(
                  labelText: 'Discussion Content',
                  border: OutlineInputBorder(),
                ),
                maxLines: 8,
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Content cannot be empty.';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 24.0),
              _isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : ElevatedButton.icon(
                    icon: const Icon(Icons.post_add),
                    label: const Text('Create Discussion Topic'),
                    onPressed: _createTopic,
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 16.0),
                    ),
                  ),
            ],
          ),
        ),
      ),
    );
  }
}
